version: '3.8'

services:
  backend:
    image: ghcr.io/padenj/travel-list-backend:latest
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_FILE=/data/travel-list.sqlite
    volumes:
      - <localvolumepath>:/data
    # Internal-only service: not published to host
    expose:
      - "3001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # One-shot migration helper. Use this with `docker compose run --rm migrate`
  migrate:
    image: ghcr.io/padenj/travel-list-backend:latest
    environment:
      - NODE_ENV=production
      - DB_FILE=/data/travel-list.sqlite
      - PORT=3001
    volumes:
      - <localvolumepath>:/data
    entrypoint: ["/bin/sh", "-c", "node server/migrations/run-migrations-knex.cjs up || true"]
    restart: 'no'

  # cloudflared is mentioned as the external proxy; this is a placeholder service
  # In Portainer you'd configure cloudflared separately or as a service like below.
  cloudflared:
    image: cloudflare/cloudflared:2024.3.0
    command: tunnel --no-autoupdate run --token ${CLOUDFLARED_TOKEN}
    environment:
      - CLOUDFLARED_TOKEN=${CLOUDFLARED_TOKEN}
    restart: unless-stopped

volumes:
  data:

# Usage notes:
# - Replace <localvolumepath> with the host path you want mounted, for example:
#     /srv/travel-list/db:/data
# - The backend is configured to read/write the SQLite DB at /data/travel-list.sqlite
# - The backend is served directly on its internal port (3001). For production
#   deployments put the app behind your preferred reverse proxy/load balancer
#   (Traefik, cloud provider load balancer, etc.) and configure TLS there.
