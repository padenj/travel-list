version: '3.8'

services:
  web:
    image: ghcr.io/padenj/travel-list-web:latest
    user: "0"
    ports:
      - "3000:80"    # host 3000 -> container nginx (80)
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/ >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - backend
    restart: unless-stopped

  backend:
    image: ghcr.io/padenj/travel-list-backend:latest
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_FILE=/data/travel-list.sqlite
    volumes:
      - <localvolumepath>:/data
    # Internal-only service: not published to host
    expose:
      - "3001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # One-shot migration helper. Use this with `docker compose run --rm migrate`
  migrate:
    image: ghcr.io/padenj/travel-list-backend:latest
    environment:
      - NODE_ENV=production
      - DB_FILE=/data/travel-list.sqlite
      - PORT=3001
    volumes:
      - <localvolumepath>:/data
    entrypoint: ["/bin/sh", "-c", "node server/migrations/run-migrations-knex.cjs up || true"]
    restart: 'no'

  # cloudflared is mentioned as the external proxy; this is a placeholder service
  # In Portainer you'd configure cloudflared separately or as a service like below.
  cloudflared:
    image: cloudflare/cloudflared:2024.3.0
    command: tunnel --no-autoupdate run --token ${CLOUDFLARED_TOKEN}
    environment:
      - CLOUDFLARED_TOKEN=${CLOUDFLARED_TOKEN}
    restart: unless-stopped

volumes:
  data:

# Usage notes:
# - Replace <localvolumepath> with the host path you want mounted, for example:
#     /srv/travel-list/db:/data
# - The backend is configured to read/write the SQLite DB at /data/travel-list.sqlite
# - The web image (frontend) will proxy /api to the backend service name (backend:3001)
#   via the nginx config in `docker/nginx-site.conf` which is set to proxy to 127.0.0.1
#   when used inside the web container. If you prefer nginx to proxy to the docker
#   network name, update `docker/nginx-site.conf` proxy_pass to http://backend:3001
